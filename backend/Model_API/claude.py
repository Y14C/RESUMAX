"""
Claude API Handler for Resumax Application

This module handles all interactions with Anthropic's Claude API for resume formatting.

PARAMETERS RECEIVED FROM main.py:
    - api_key: str - Anthropic API key for authentication
    - model_name: str - Selected Claude model identifier
    - system_prompt: str - System prompt read from Model_API/system-prompt.txt
    - latex_format: str - LaTeX template content read from Latex_formats/ATS.tex
    - extracted_text: str - Plain text content extracted from uploaded resume

RETURNS TO main.py:
    - latex_code: str - Formatted LaTeX resume code generated by Claude

ERROR HANDLING:
    - All API errors, network issues, authentication failures are raised as exceptions
    - No fallback logic provided - errors propagate to main.py for handling
"""

import anthropic
import logging
from typing import Dict, List

# Configure logging for this module
logger = logging.getLogger(__name__)

# Hardcoded list of available Claude models
AVAILABLE_MODELS = [
    "claude-sonnet-4-5-20250929",  # Claude Sonnet 4.5
    "claude-sonnet-4-20250514",     # Claude Sonnet 4
    "claude-haiku-4-20250514"       # Claude Haiku 4.5
]

# API Configuration
TEMPERATURE = 0.4


def get_available_models() -> List[str]:
    """
    Returns list of available Claude models for user selection.
    
    CALLED BY: main.py during model selection phase
    RETURNS TO: main.py for display in UI
    """
    return AVAILABLE_MODELS


def format_resume(
    api_key: str,
    model_name: str,
    system_prompt: str,
    latex_format: str,
    extracted_text: str
) -> str:
    """
    Main function to format resume using Claude API.
    
    CALLED BY: main.py after user configuration and file upload
    
    RECEIVES FROM main.py:
        - api_key: Anthropic API key
        - model_name: Selected model from AVAILABLE_MODELS
        - system_prompt: Content from Model_API/system-prompt.txt
        - latex_format: Content from Latex_formats/ATS.tex
        - extracted_text: Processed text from upload_handler.py/pdf_handler.py
    
    RETURNS TO main.py:
        - Formatted LaTeX resume code as string
    
    RAISES:
        - anthropic.APIError: For API-related errors
        - anthropic.AuthenticationError: For invalid API key
        - anthropic.RateLimitError: For rate limit issues
        - Exception: For any other unexpected errors
    """
    # Log function entry
    logger.info(f"[AI REQUEST] Claude format_resume() called with model: {model_name}")
    
    # Validate model name
    if model_name not in AVAILABLE_MODELS:
        raise ValueError(f"Invalid model name: {model_name}. Must be one of {AVAILABLE_MODELS}")
    
    # Initialize Anthropic client
    client = anthropic.Anthropic(api_key=api_key)
    
    # Construct user message with format template and extracted text
    user_message = _build_user_message(latex_format, extracted_text)
    
    # Make API call
    try:
        logger.info(f"[AI REQUEST] Making Claude API call to {model_name} with temperature {TEMPERATURE}")
        response = client.messages.create(
            model=model_name,
            max_tokens=16000,
            temperature=TEMPERATURE,
            system=system_prompt,
            messages=[
                {
                    "role": "user",
                    "content": user_message
                }
            ]
        )
        
        # Extract LaTeX code from response
        latex_code = _extract_latex_from_response(response)
        
        logger.info(f"[AI RESPONSE] Claude API call successful - Response length: {len(latex_code)} characters")
        return latex_code
        
    except anthropic.APIError as e:
        # API-related errors (connection, server issues, etc.)
        logger.error(f"[AI ERROR] Claude API Error for {model_name}: {str(e)}")
        raise Exception(f"Claude API Error: {str(e)}") from e
    
    except anthropic.AuthenticationError as e:
        # Invalid API key
        logger.error(f"[AI ERROR] Claude Authentication Error for {model_name}: {str(e)}")
        raise Exception(f"Authentication Error: Invalid API key - {str(e)}") from e
    
    except anthropic.RateLimitError as e:
        # Rate limit exceeded
        logger.error(f"[AI ERROR] Claude Rate Limit Error for {model_name}: {str(e)}")
        raise Exception(f"Rate Limit Error: {str(e)}") from e
    
    except Exception as e:
        # Catch-all for unexpected errors
        logger.error(f"[AI ERROR] Unexpected error in Claude API call for {model_name}: {str(e)}")
        raise Exception(f"Unexpected error in Claude API call: {str(e)}") from e


def _build_user_message(latex_format: str, extracted_text: str) -> str:
    """
    Constructs the user message combining LaTeX format template and extracted resume text.
    Internal function - not called from outside this module.
    """
    user_message = f"""Here is the LaTeX format template to use:

{latex_format}

---

Here is the resume content to format:

{extracted_text}

---

Please format the above resume content using the provided LaTeX template. Return only the complete LaTeX code, ready to compile."""
    
    return user_message


def _extract_latex_from_response(response) -> str:
    """
    Extracts LaTeX code from Claude's API response.
    Internal function - not called from outside this module.
    """
    # Claude returns response in content blocks
    if not response.content:
        raise Exception("Empty response received from Claude API")
    
    # Extract text from first content block
    latex_code = response.content[0].text
    
    if not latex_code or len(latex_code.strip()) == 0:
        raise Exception("No LaTeX code found in Claude's response")
    
    return latex_code