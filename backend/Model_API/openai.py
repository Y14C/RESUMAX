"""
OpenAI API Handler for Resumax Application

This module handles all interactions with OpenAI's API for resume formatting.

PARAMETERS RECEIVED FROM main.py:
    - api_key: str - OpenAI API key for authentication
    - model_name: str - Selected OpenAI model identifier
    - system_prompt: str - System prompt read from Model_API/system-prompt.txt
    - latex_format: str - LaTeX template content read from Latex_formats/ATS.tex
    - extracted_text: str - Plain text content extracted from uploaded resume

RETURNS TO main.py:
    - latex_code: str - Formatted LaTeX resume code generated by OpenAI

ERROR HANDLING:
    - All API errors, network issues, authentication failures are raised as exceptions
    - No fallback logic provided - errors propagate to main.py for handling
"""

from openai import OpenAI
import logging
from typing import List

# Configure logging for this module
logger = logging.getLogger(__name__)

# Hardcoded list of available OpenAI models
AVAILABLE_MODELS = [
    "gpt-5-2025-08-07",              # GPT-5 - Most advanced reasoning model
    "gpt-4.1-2025-04-14",            # GPT-4.1 - Smartest non-reasoning multimodal model
    "o3-2025-04-16"                  # o3 - Advanced reasoning model (o-series)
]

# API Configuration
TEMPERATURE = 0.4


def get_available_models() -> List[str]:
    """
    Returns list of available OpenAI models for user selection.
    
    CALLED BY: main.py during model selection phase
    RETURNS TO: main.py for display in UI
    """
    return AVAILABLE_MODELS


def format_resume(
    api_key: str,
    model_name: str,
    system_prompt: str,
    latex_format: str,
    extracted_text: str
) -> str:
    """
    Main function to format resume using OpenAI API.
    
    CALLED BY: main.py after user configuration and file upload
    
    RECEIVES FROM main.py:
        - api_key: OpenAI API key
        - model_name: Selected model from AVAILABLE_MODELS
        - system_prompt: Content from Model_API/system-prompt.txt
        - latex_format: Content from Latex_formats/ATS.tex
        - extracted_text: Processed text from upload_handler.py/pdf_handler.py
    
    RETURNS TO main.py:
        - Formatted LaTeX resume code as string
    
    RAISES:
        - openai.APIError: For API-related errors
        - openai.AuthenticationError: For invalid API key
        - openai.RateLimitError: For rate limit issues
        - Exception: For any other unexpected errors
    """
    # Log function entry
    logger.info(f"[AI REQUEST] OpenAI format_resume() called with model: {model_name}")
    
    # Validate model name
    if model_name not in AVAILABLE_MODELS:
        raise ValueError(f"Invalid model name: {model_name}. Must be one of {AVAILABLE_MODELS}")
    
    # Initialize OpenAI client
    client = OpenAI(api_key=api_key)
    
    # Construct user message with format template and extracted text
    user_message = _build_user_message(latex_format, extracted_text)
    
    # Make API call
    try:
        logger.info(f"[AI REQUEST] Making OpenAI API call to {model_name} with temperature {TEMPERATURE}")
        response = client.chat.completions.create(
            model=model_name,
            temperature=TEMPERATURE,
            messages=[
                {
                    "role": "system",
                    "content": system_prompt
                },
                {
                    "role": "user",
                    "content": user_message
                }
            ]
        )
        
        # Extract LaTeX code from response
        latex_code = _extract_latex_from_response(response)
        
        logger.info(f"[AI RESPONSE] OpenAI API call successful - Response length: {len(latex_code)} characters")
        return latex_code
        
    except Exception as e:
        # Handle various OpenAI exceptions
        error_type = type(e).__name__
        
        if "AuthenticationError" in error_type:
            logger.error(f"[AI ERROR] OpenAI Authentication Error for {model_name}: {str(e)}")
            raise Exception(f"Authentication Error: Invalid API key - {str(e)}") from e
        elif "RateLimitError" in error_type:
            logger.error(f"[AI ERROR] OpenAI Rate Limit Error for {model_name}: {str(e)}")
            raise Exception(f"Rate Limit Error: {str(e)}") from e
        elif "APIError" in error_type:
            logger.error(f"[AI ERROR] OpenAI API Error for {model_name}: {str(e)}")
            raise Exception(f"OpenAI API Error: {str(e)}") from e
        else:
            logger.error(f"[AI ERROR] Unexpected error in OpenAI API call for {model_name}: {str(e)}")
            raise Exception(f"Unexpected error in OpenAI API call: {str(e)}") from e


def _build_user_message(latex_format: str, extracted_text: str) -> str:
    """
    Constructs the user message combining LaTeX format template and extracted resume text.
    Internal function - not called from outside this module.
    """
    user_message = f"""Here is the LaTeX format template to use:

{latex_format}

---

Here is the resume content to format:

{extracted_text}

---

Please format the above resume content using the provided LaTeX template. Return only the complete LaTeX code, ready to compile."""
    
    return user_message


def _extract_latex_from_response(response) -> str:
    """
    Extracts LaTeX code from OpenAI's API response.
    Internal function - not called from outside this module.
    """
    # OpenAI returns response in choices array
    if not response.choices:
        raise Exception("Empty response received from OpenAI API")
    
    # Extract text from first choice
    latex_code = response.choices[0].message.content
    
    if not latex_code or len(latex_code.strip()) == 0:
        raise Exception("No LaTeX code found in OpenAI's response")
    
    return latex_code